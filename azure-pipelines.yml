trigger:
  branches:
    include:
      - main
      - features/*
  paths:
    include:
      - src/*

schedules:
  - cron: "0 0 * * Mon-Fri"
    displayName: Nightly build
    branches:
      include:
        - main
    always: true

resources:
  repositories:
    - repository: covscan
      type: github
      name: UKHO/coverityscan-buildtemplates
      endpoint: UKHO
      ref: refs/heads/master

variables:
  - group: Covscan-vars

stages:
  - stage: Build
    jobs:
      - job: Coverity
        pool: NautilusBuild
        steps:
          - checkout: self
            submodules: recursive
          - checkout: covscan
          - template: dotnet-cov.yml@covScan
            parameters:
              CovHostUrl: "$(CovHostUrl)"
              CovUser: "$(CovUser)"
              CovPwd: "$(CovPwd)"
              StreamName: "sales-catalogue-api-stub"
              BuildCommand: "$(Build.Repository.LocalPath)/sales-catalogue-stub/src/UKHO.SalesCatalogueStub.Api/UKHO.SalesCatalogueStub.Api.csproj"
              StripPath: $(Build.Repository.LocalPath)/sales-catalogue-stub/src/UKHO.SalesCatalogueStub.Api
              CoverityScanPath: $(Build.Repository.LocalPath)/coverityscan-buildtemplates

      - job: RestoreBuildAndDeploy
        pool: NautilusBuild

        workspace:
          clean: all

        steps:
          - task: UseDotNet@2
            displayName: "Use .NET Core 3.1.x SDK"
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)\\dotnet

          - task: DownloadSecureFile@1
            inputs:
              secureFile: "SalesCatalogueStub_Nuget_Config"
            name: "SalesCatalogueStub_Nuget_Config"
            displayName: "Download Nuget.config from Secure Files"

          - task: DotNetCoreCLI@2
            inputs:
              command: "restore"
              arguments: "--runtime win10-x64"
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api\\UKHO.SalesCatalogueStub.Api.csproj'
              feedsToUse: "config"
              nugetConfigPath: "$(SalesCatalogueStub_Nuget_Config.secureFilePath)"
            displayName: "dotnet restore UKHO.SalesCatalogueStub.Api"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "--configuration Release --no-restore --runtime win10-x64 --framework netcoreapp3.1"
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api\\UKHO.SalesCatalogueStub.Api.csproj'
            displayName: "dotnet build UKHO.SalesCatalogueStub.Api"

          - task: DotNetCoreCLI@2
            inputs:
              command: "publish"
              publishWebProjects: true
              zipAfterPublish: false
              arguments: '--configuration Release --no-restore --no-build --runtime win10-x64 --framework netcoreapp3.1 --self-contained true --output "$(Build.ArtifactStagingDirectory)\\"'
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api\\UKHO.SalesCatalogueStub.Api.csproj'
            displayName: "dotnet publish UKHO.SalesCatalogueStub.Api"

          - task: DotNetCoreCLI@2
            inputs:
              command: "restore"
              arguments: "--configuration Release --runtime win10-x64"
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api.Tests\\UKHO.SalesCatalogueStub.Api.Tests.csproj'
              feedsToUse: "config"
              nugetConfigPath: "$(SalesCatalogueStub_Nuget_Config.secureFilePath)"
            displayName: "dotnet restore UKHO.SalesCatalogueStub.Api.Tests"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "--configuration Release --no-restore --runtime win10-x64 --framework netcoreapp3.1"
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api.Tests\\UKHO.SalesCatalogueStub.Api.Tests.csproj'
            displayName: "dotnet build UKHO.SalesCatalogueStub.Api.Tests"
            
          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              arguments: '--configuration Release --no-restore --no-build --runtime win10-x64 --framework netcoreapp3.1'
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api.Tests\\UKHO.SalesCatalogueStub.Api.Tests.csproj'
            displayName: "dotnet test UKHO.SalesCatalogueStub.Api.Tests"

          - task: DotNetCoreCLI@2
            inputs:
              command: "restore"
              arguments: "--configuration Release --runtime win10-x64"
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api.IntegrationTests\\UKHO.SalesCatalogueStub.Api.IntegrationTests.csproj'
              feedsToUse: "config"
              nugetConfigPath: "$(SalesCatalogueStub_Nuget_Config.secureFilePath)"
            displayName: "dotnet restore UKHO.SalesCatalogueStub.Api.IntegrationTests"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "--configuration Release --no-restore --runtime win10-x64 --framework netcoreapp3.1"
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api.IntegrationTests\\UKHO.SalesCatalogueStub.Api.IntegrationTests.csproj'
            displayName: "dotnet build UKHO.SalesCatalogueStub.Api.IntegrationTests"
            
          - task: DotNetCoreCLI@2
            inputs:
              command: "publish"
              publishWebProjects: false
              zipAfterPublish: false
              arguments: '--configuration Release --no-restore --no-build --runtime win10-x64 --framework netcoreapp3.1 --self-contained false --output "$(Build.ArtifactStagingDirectory)\\"'
              projects: '$(Build.SourcesDirectory)\\src\\UKHO.SalesCatalogueStub.Api.IntegrationTests\\UKHO.SalesCatalogueStub.Api.IntegrationTests.csproj'
            displayName: "dotnet publish UKHO.SalesCatalogueStub.Api.IntegrationTests"

          - publish: '$(Build.ArtifactStagingDirectory)\\UKHO.SalesCatalogueStub.Api\\'
            artifact: "UKHO.SalesCatalogueStub.Api"

          - publish: '$(Build.ArtifactStagingDirectory)\\UKHO.SalesCatalogueStub.Api.IntegrationTests\\'
            artifact: "UKHO.SalesCatalogueStub.Api.IntegrationTests"

          - publish: '$(Build.SourcesDirectory)\\NVDSuppressions.xml'
            artifact: "NVD Suppressions"

      - job: DependencyCheck
        dependsOn: RestoreBuildAndDeploy
        pool: NautilusBuild

        workspace:
          clean: all

        steps:
          - checkout: none

          - download: current
            artifact: UKHO.SalesCatalogueStub.Api

          - download: current
            artifact: NVD Suppressions

          - task: UseDotNet@2
            displayName: "Use .NET Core 3.1.x SDK"
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)\\dotnet

          - task: PowerShell@2
            inputs:
              targetType: "inline"
              script: |
                $maxAttempts = 2
                $outPath = "$(Build.SourcesDirectory)\DCReport"
                for ($i = 0; $i -lt $maxAttempts; $i++) {
                    write-host "Attempt $i"
                    dependency-check --project "UKHO.SalesCatalogueStub.Api - $(Build.SourceBranchName)" --scan '$(Pipeline.Workspace)\\UKHO.SalesCatalogueStub.Api\\' --out "$outPath" --suppression "$(Pipeline.Workspace)\\NVD Suppressions\NVDSuppressions.xml"
                    if ((test-path $outPath) -and (get-childitem $outPath | Measure-Object | select-object -ExpandProperty Count) -gt 0) {
                        write-host "Attempt $i successful"
                        break
                    }
                    write-host "Attempt $i failed, so purge dependency-check database"
                    dependency-check --purge
                    start-sleep -seconds 5
                }
              pwsh: true
            displayName: "Run NVD Checker"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.SourcesDirectory)\DCReport'
              artifact: "NVD report"
              publishLocation: "pipeline"

          - task: PowerShell@2
            displayName: "Fail build if dependency checker has vulnerabilities"
            inputs:
              targetType: inline
              script: Invoke-VulnerabilityCheck -ReportLocation $(Build.SourcesDirectory)\DCReport\*

  - stage: DeployDev
    dependsOn:
      - Build
    variables:
      - group: SalesCatStubDEV
    condition: or(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeploySalesCatalogueStubApiDev
        displayName: Deploy Sales Catalogue Stub API Dev
        pool: "UKHO Ubuntu 1804"
        environment: "SalesCatStubDev"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: UKHO.SalesCatalogueStub.Api
                - task: AzureRmWebAppDeployment@4
                  displayName: "Azure App Service Deploy"
                  inputs:
                    ConnectedServiceName: M-SalesCatStub-Dev-SC
                    WebAppName: $(PIPELINE-APP-SERVICE-NAME)
                    packageForLinux: "$(Pipeline.Workspace)/UKHO.SalesCatalogueStub.Api"

  - stage: IntegrationTestsDev
    dependsOn:
      - DeployDev
    variables:
      - group: SalesCatStubDEV
    jobs:
      - job: IntegrationTests
        pool: NautilusBuild

        workspace:
          clean: all

        steps:
          - checkout: none

          - download: current
            artifact: UKHO.SalesCatalogueStub.Api.IntegrationTests

          - task: UseDotNet@2
            displayName: "Use .NET Core 3.1.x SDK"
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)\\dotnet

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'M-SalesCatStub-Dev-SC'
              scriptLocation: 'inlineScript'
              scriptType: 'pscore'
              inlineScript: |
                dotnet test '$(Pipeline.Workspace)\\UKHO.SalesCatalogueStub.Api.IntegrationTests\\UKHO.SalesCatalogueStub.Api.IntegrationTests.dll' `
                              --configuration Release --no-build --runtime win10-x64 --logger:trx
            displayName: 'dotnet test UKHO.SalesCatalogueStub.Api.IntegrationTests'
            env:
              SCS_AZURE_APP_CONFIGURATION_CONNECTION_STRING: $(PIPELINE-SCS-AZURE-APP-CONFIGURATION-CONNECTION-STRING)
              SCS_KEY_VAULT_ADDRESS: $(PIPELINE-SCS-KEY-VAULT-ADDRESS)
              
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              testRunTitle: 'IntegrationTests - $(System.StageName)'

  - stage: DeployQA
    dependsOn:
      - IntegrationTestsDev
    variables:
      - group: SalesCatStubQA
    jobs:
      - deployment: DeploySalesCatalogueStubApiQa
        displayName: Deploy Sales Catalogue Stub API QA
        pool: "UKHO Ubuntu 1804"
        environment: "SalesCatStubQA"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: UKHO.SalesCatalogueStub.Api
                - task: AzureRmWebAppDeployment@4
                  displayName: "Azure App Service Deploy"
                  inputs:
                    ConnectedServiceName: M-SalesCatStub-QA-SC
                    WebAppName: $(PIPELINE-APP-SERVICE-NAME)
                    packageForLinux: "$(Pipeline.Workspace)/UKHO.SalesCatalogueStub.Api"

  - stage: IntegrationTestsQA
    dependsOn:
      - DeployQA
    variables:
      - group: SalesCatStubQA
    jobs:
      - job: IntegrationTests
        pool: NautilusBuild

        workspace:
          clean: all

        steps:
          - checkout: none

          - download: current
            artifact: UKHO.SalesCatalogueStub.Api.IntegrationTests

          - task: UseDotNet@2
            displayName: "Use .NET Core 3.1.x SDK"
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)\\dotnet

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'M-SalesCatStub-QA-SC'
              scriptLocation: 'inlineScript'
              scriptType: 'pscore'
              inlineScript: |
                dotnet test '$(Pipeline.Workspace)\\UKHO.SalesCatalogueStub.Api.IntegrationTests\\UKHO.SalesCatalogueStub.Api.IntegrationTests.dll' `
                            --configuration Release --no-build --runtime win10-x64 --logger:trx
            displayName: 'dotnet test UKHO.SalesCatalogueStub.Api.IntegrationTests'
            env:
              SCS_AZURE_APP_CONFIGURATION_CONNECTION_STRING: $(PIPELINE-SCS-AZURE-APP-CONFIGURATION-CONNECTION-STRING)
              SCS_KEY_VAULT_ADDRESS: $(PIPELINE-SCS-KEY-VAULT-ADDRESS)

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              testRunTitle: 'IntegrationTests - $(System.StageName)'