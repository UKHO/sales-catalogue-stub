/*
 * Sales Catalogue Service API
 *
 * This API is for Sales Catalogue Service 
 *
 * OpenAPI spec version: 1.3
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace UKHO.SalesCatalogueStub.Api.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EssDataInner : IEquatable<EssDataInner>
    {
        /// <summary>
        /// Name of product 
        /// </summary>
        /// <value>Name of product </value>
        [DataMember(Name = "productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// The date that a base cell (new cell, new edition or re-issue) was issued. 
        /// </summary>
        /// <value>The date that a base cell (new cell, new edition or re-issue) was issued. </value>
        [DataMember(Name = "baseCellIssueDate")]
        public DateTime? BaseCellIssueDate { get; set; }

        /// <summary>
        /// The edition number
        /// </summary>
        /// <value>The edition number</value>
        [DataMember(Name = "baseCellEditionNumber")]
        public int? BaseCellEditionNumber { get; set; }

        /// <summary>
        /// The date that the latest update was issued. 
        /// </summary>
        /// <value>The date that the latest update was issued. </value>
        [DataMember(Name = "issueDateLatestUpdate")]
        public DateTime? IssueDateLatestUpdate { get; set; }

        /// <summary>
        /// The update number of the latest update.  Blank when no update. 
        /// </summary>
        /// <value>The update number of the latest update.  Blank when no update. </value>
        [DataMember(Name = "latestUpdateNumber")]
        public int? LatestUpdateNumber { get; set; }

        /// <summary>
        /// The total file size in kilobytes for all files issued for the product. Currently blank.  
        /// </summary>
        /// <value>The total file size in kilobytes for all files issued for the product. Currently blank.  </value>
        [DataMember(Name = "fileSize")]
        public int? FileSize { get; set; }

        /// <summary>
        /// Southernmost latitude of data coverage in the ENC product. 
        /// </summary>
        /// <value>Southernmost latitude of data coverage in the ENC product. </value>
        [DataMember(Name = "cellLimitSouthernmostLatitude")]
        public decimal? CellLimitSouthernmostLatitude { get; set; }

        /// <summary>
        /// Westernmost longitude of data coverage in the ENC product. 
        /// </summary>
        /// <value>Westernmost longitude of data coverage in the ENC product. </value>
        [DataMember(Name = "cellLimitWesternmostLatitude")]
        public decimal? CellLimitWesternmostLatitude { get; set; }

        /// <summary>
        /// Northernmost latitude of data coverage in the ENC product. 
        /// </summary>
        /// <value>Northernmost latitude of data coverage in the ENC product. </value>
        [DataMember(Name = "cellLimitNorthernmostLatitude")]
        public decimal? CellLimitNorthernmostLatitude { get; set; }

        /// <summary>
        /// Easternmost longitude of data coverage in the ENC product 
        /// </summary>
        /// <value>Easternmost longitude of data coverage in the ENC product </value>
        [DataMember(Name = "cellLimitEasternmostLatitude")]
        public decimal? CellLimitEasternmostLatitude { get; set; }

        /// <summary>
        /// Optional. Currently blank. 10 coordinate pairs can be supplied to indicate the data coverage within the ENC cell. It will be provided as repeating Y-coordinate and X-coordinate pairs.  
        /// </summary>
        /// <value>Optional. Currently blank. 10 coordinate pairs can be supplied to indicate the data coverage within the ENC cell. It will be provided as repeating Y-coordinate and X-coordinate pairs.  </value>
        [DataMember(Name = "dataCoverageCoordinates")]
        public List<DataCoverageCoordinate> DataCoverageCoordinates { get; set; }

        /// <summary>
        /// Indicator of compression of dataset.   
        /// </summary>
        /// <value>Indicator of compression of dataset.   </value>
        [DataMember(Name = "compression")]
        public bool? Compression { get; set; }

        /// <summary>
        /// Indicator of encryption of dataset.   
        /// </summary>
        /// <value>Indicator of encryption of dataset.   </value>
        [DataMember(Name = "encryption")]
        public bool? Encryption { get; set; }

        /// <summary>
        /// The update number current at the time of a cell reissue. If a cell edition does not have a re-issue then this field is blank or zero filled  
        /// </summary>
        /// <value>The update number current at the time of a cell reissue. If a cell edition does not have a re-issue then this field is blank or zero filled  </value>
        [DataMember(Name = "baseCellUpdateNumber")]
        public int? BaseCellUpdateNumber { get; set; }

        /// <summary>
        /// Last update number of previous edition, if previous editions are available.   Currently blank. 
        /// </summary>
        /// <value>Last update number of previous edition, if previous editions are available.   Currently blank. </value>
        [DataMember(Name = "lastUpdateNumberPreviousEdition")]
        public int? LastUpdateNumberPreviousEdition { get; set; }

        /// <summary>
        /// DVDs This field is divided into two subfields delimited by a “;” (semi colon). The first subfield contains the media number ID and the second the exchange set number. The Media ID is designated with a “M” followed by a number.  
        /// </summary>
        /// <value>DVDs This field is divided into two subfields delimited by a “;” (semi colon). The first subfield contains the media number ID and the second the exchange set number. The Media ID is designated with a “M” followed by a number.  </value>
        [DataMember(Name = "baseCellLocation")]
        public string BaseCellLocation { get; set; }

        /// <summary>
        /// List of replacement cells, if relevant, when a cell is cancelled.  Semi-colon separated. 
        /// </summary>
        /// <value>List of replacement cells, if relevant, when a cell is cancelled.  Semi-colon separated. </value>
        [DataMember(Name = "cancelledCellReplacements")]
        public List<string> CancelledCellReplacements { get; set; }

        /// <summary>
        /// The date that the previous update was issued when the current update is a re-issue. 
        /// </summary>
        /// <value>The date that the previous update was issued when the current update is a re-issue. </value>
        [DataMember(Name = "issueDatePreviousUpdate")]
        public DateTime? IssueDatePreviousUpdate { get; set; }

        /// <summary>
        /// For a cancellation, this is the latest edition number prior to the cancellation update 
        /// </summary>
        /// <value>For a cancellation, this is the latest edition number prior to the cancellation update </value>
        [DataMember(Name = "cancelledEditionNumber")]
        public int? CancelledEditionNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EssDataInner {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  BaseCellIssueDate: ").Append(BaseCellIssueDate).Append("\n");
            sb.Append("  BaseCellEditionNumber: ").Append(BaseCellEditionNumber).Append("\n");
            sb.Append("  IssueDateLatestUpdate: ").Append(IssueDateLatestUpdate).Append("\n");
            sb.Append("  LatestUpdateNumber: ").Append(LatestUpdateNumber).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  CellLimitSouthernmostLatitude: ").Append(CellLimitSouthernmostLatitude).Append("\n");
            sb.Append("  CellLimitWesternmostLatitude: ").Append(CellLimitWesternmostLatitude).Append("\n");
            sb.Append("  CellLimitNorthernmostLatitude: ").Append(CellLimitNorthernmostLatitude).Append("\n");
            sb.Append("  CellLimitEasternmostLatitude: ").Append(CellLimitEasternmostLatitude).Append("\n");
            sb.Append("  DataCoverageCoordinates: ").Append(DataCoverageCoordinates).Append("\n");
            sb.Append("  Compression: ").Append(Compression).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  BaseCellUpdateNumber: ").Append(BaseCellUpdateNumber).Append("\n");
            sb.Append("  LastUpdateNumberPreviousEdition: ").Append(LastUpdateNumberPreviousEdition).Append("\n");
            sb.Append("  BaseCellLocation: ").Append(BaseCellLocation).Append("\n");
            sb.Append("  CancelledCellReplacements: ").Append(CancelledCellReplacements).Append("\n");
            sb.Append("  IssueDatePreviousUpdate: ").Append(IssueDatePreviousUpdate).Append("\n");
            sb.Append("  CancelledEditionNumber: ").Append(CancelledEditionNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EssDataInner)obj);
        }

        /// <summary>
        /// Returns true if EssDataInner instances are equal
        /// </summary>
        /// <param name="other">Instance of EssDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EssDataInner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) &&
                (
                    BaseCellIssueDate == other.BaseCellIssueDate ||
                    BaseCellIssueDate != null &&
                    BaseCellIssueDate.Equals(other.BaseCellIssueDate)
                ) &&
                (
                    BaseCellEditionNumber == other.BaseCellEditionNumber ||
                    BaseCellEditionNumber != null &&
                    BaseCellEditionNumber.Equals(other.BaseCellEditionNumber)
                ) &&
                (
                    IssueDateLatestUpdate == other.IssueDateLatestUpdate ||
                    IssueDateLatestUpdate != null &&
                    IssueDateLatestUpdate.Equals(other.IssueDateLatestUpdate)
                ) &&
                (
                    LatestUpdateNumber == other.LatestUpdateNumber ||
                    LatestUpdateNumber != null &&
                    LatestUpdateNumber.Equals(other.LatestUpdateNumber)
                ) &&
                (
                    FileSize == other.FileSize ||
                    FileSize != null &&
                    FileSize.Equals(other.FileSize)
                ) &&
                (
                    CellLimitSouthernmostLatitude == other.CellLimitSouthernmostLatitude ||
                    CellLimitSouthernmostLatitude != null &&
                    CellLimitSouthernmostLatitude.Equals(other.CellLimitSouthernmostLatitude)
                ) &&
                (
                    CellLimitWesternmostLatitude == other.CellLimitWesternmostLatitude ||
                    CellLimitWesternmostLatitude != null &&
                    CellLimitWesternmostLatitude.Equals(other.CellLimitWesternmostLatitude)
                ) &&
                (
                    CellLimitNorthernmostLatitude == other.CellLimitNorthernmostLatitude ||
                    CellLimitNorthernmostLatitude != null &&
                    CellLimitNorthernmostLatitude.Equals(other.CellLimitNorthernmostLatitude)
                ) &&
                (
                    CellLimitEasternmostLatitude == other.CellLimitEasternmostLatitude ||
                    CellLimitEasternmostLatitude != null &&
                    CellLimitEasternmostLatitude.Equals(other.CellLimitEasternmostLatitude)
                ) &&
                (
                    DataCoverageCoordinates == other.DataCoverageCoordinates ||
                    DataCoverageCoordinates != null &&
                    DataCoverageCoordinates.SequenceEqual(other.DataCoverageCoordinates)
                ) &&
                (
                    Compression == other.Compression ||
                    Compression != null &&
                    Compression.Equals(other.Compression)
                ) &&
                (
                    Encryption == other.Encryption ||
                    Encryption != null &&
                    Encryption.Equals(other.Encryption)
                ) &&
                (
                    BaseCellUpdateNumber == other.BaseCellUpdateNumber ||
                    BaseCellUpdateNumber != null &&
                    BaseCellUpdateNumber.Equals(other.BaseCellUpdateNumber)
                ) &&
                (
                    LastUpdateNumberPreviousEdition == other.LastUpdateNumberPreviousEdition ||
                    LastUpdateNumberPreviousEdition != null &&
                    LastUpdateNumberPreviousEdition.Equals(other.LastUpdateNumberPreviousEdition)
                ) &&
                (
                    BaseCellLocation == other.BaseCellLocation ||
                    BaseCellLocation != null &&
                    BaseCellLocation.Equals(other.BaseCellLocation)
                ) &&
                (
                    CancelledCellReplacements == other.CancelledCellReplacements ||
                    CancelledCellReplacements != null &&
                    CancelledCellReplacements.SequenceEqual(other.CancelledCellReplacements)
                ) &&
                (
                    IssueDatePreviousUpdate == other.IssueDatePreviousUpdate ||
                    IssueDatePreviousUpdate != null &&
                    IssueDatePreviousUpdate.Equals(other.IssueDatePreviousUpdate)
                ) &&
                (
                    CancelledEditionNumber == other.CancelledEditionNumber ||
                    CancelledEditionNumber != null &&
                    CancelledEditionNumber.Equals(other.CancelledEditionNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                if (BaseCellIssueDate != null)
                    hashCode = hashCode * 59 + BaseCellIssueDate.GetHashCode();
                if (BaseCellEditionNumber != null)
                    hashCode = hashCode * 59 + BaseCellEditionNumber.GetHashCode();
                if (IssueDateLatestUpdate != null)
                    hashCode = hashCode * 59 + IssueDateLatestUpdate.GetHashCode();
                if (LatestUpdateNumber != null)
                    hashCode = hashCode * 59 + LatestUpdateNumber.GetHashCode();
                if (FileSize != null)
                    hashCode = hashCode * 59 + FileSize.GetHashCode();
                if (CellLimitSouthernmostLatitude != null)
                    hashCode = hashCode * 59 + CellLimitSouthernmostLatitude.GetHashCode();
                if (CellLimitWesternmostLatitude != null)
                    hashCode = hashCode * 59 + CellLimitWesternmostLatitude.GetHashCode();
                if (CellLimitNorthernmostLatitude != null)
                    hashCode = hashCode * 59 + CellLimitNorthernmostLatitude.GetHashCode();
                if (CellLimitEasternmostLatitude != null)
                    hashCode = hashCode * 59 + CellLimitEasternmostLatitude.GetHashCode();
                if (DataCoverageCoordinates != null)
                    hashCode = hashCode * 59 + DataCoverageCoordinates.GetHashCode();
                if (Compression != null)
                    hashCode = hashCode * 59 + Compression.GetHashCode();
                if (Encryption != null)
                    hashCode = hashCode * 59 + Encryption.GetHashCode();
                if (BaseCellUpdateNumber != null)
                    hashCode = hashCode * 59 + BaseCellUpdateNumber.GetHashCode();
                if (LastUpdateNumberPreviousEdition != null)
                    hashCode = hashCode * 59 + LastUpdateNumberPreviousEdition.GetHashCode();
                if (BaseCellLocation != null)
                    hashCode = hashCode * 59 + BaseCellLocation.GetHashCode();
                if (CancelledCellReplacements != null)
                    hashCode = hashCode * 59 + CancelledCellReplacements.GetHashCode();
                if (IssueDatePreviousUpdate != null)
                    hashCode = hashCode * 59 + IssueDatePreviousUpdate.GetHashCode();
                if (CancelledEditionNumber != null)
                    hashCode = hashCode * 59 + CancelledEditionNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EssDataInner left, EssDataInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EssDataInner left, EssDataInner right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
